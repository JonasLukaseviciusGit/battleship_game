import tensorflow as tf
from board_generator import make_board
import numpy as np

# Load the saved model
model_path = r"C:\Users\HP\Documents\PROGRAMAVIMAS\battleship_game\trained_models\model.h5"


# Define the BattleshipsAgent class
class BattleshipsAgent:
    def __init__(self):
        self.model = None

    def load_model(self, model_path):
        self.model = tf.keras.models.load_model(model_path)

    def predict(self, board):
        state = self.preprocess_board(board)
        q_values = self.model.predict(np.array([state]))[0]
        #-------
        arr = q_values.reshape((20, 20))
        # Get the index of the maximum value in the array
        max_index = np.argmax(arr)

        # Get the coordinate with the highest value
        coordinate = np.unravel_index(max_index, arr.shape)
        #------
        return coordinate

    def preprocess_board(self, board):
        # Preprocess the board to match the input shape of the model
        state = np.array(board).flatten()
        return state

# Load the saved model
agent = BattleshipsAgent()
agent.load_model(model_path)

# Define a new board for prediction
new_board = make_board()

# Make predictions on the new board
predictions = agent.predict(new_board)

print(new_board)
# Print the predictions
print(predictions)


