import numpy as np
from random import randint
import tkinter as tk

DIMENSION = 20

matrix = np.zeros((DIMENSION, DIMENSION), dtype=int)


def check_validity(coordinate, coords_current, coords_all):
    x, y = coordinate
    close = [[x-1, y], [x+1, y], [x, y-1], [x, y+1]]
    cross = [[x+1, y+1], [x+1, y-1], [x-1, y+1], [x-1, y-1]]
    validity = False

    if coordinate in coords_current:
        return validity

    for coord in close:
        if coord in coords_all:
            return validity

    for coord in cross:
        if coord in coords_all:
            return validity

    if matrix[x][y] == 1:
        return validity

    if len(coords_current) == 0:
        validity = True
        return validity
    else:
        for coord in coords_current:
            if coord in close:
                validity = True
                return validity
    return validity


def get_valid_coordinates(coords_current, coords_all):
    valid = []
    for x in range(1, DIMENSION-1):
        for y in range(1, DIMENSION-1):
            coord = [x, y]
            validity = check_validity(coord, coords_current, coords_all)
            if validity is True:
                valid.append(coord)
    return valid


def make_coord(coords_current):
    valid_coordinates = get_valid_coordinates(coords_current, coords_all)
    index = randint(0, len(valid_coordinates)-1)
    return valid_coordinates[index]


def build_ship(ship_type):
    coords_current = []
    for i in range(ship_type):
        coord = make_coord(coords_current)
        print(coord)
        coords_current.append(coord)
        x, y = coord
        matrix[x][y] = ship_type
    print('----------')
    for coord in coords_current:
        coords_all.append(coord)


coords_all = []

for i in range(5, 0, -1):
    for j in range(i):
        build_ship(i-j)

print(matrix)

def main_board():
    SIZE = 700

    tile_size = SIZE / (DIMENSION + 1)

    window = tk.Tk()
    canvas = tk.Canvas(window, width=SIZE, height=SIZE)
    canvas.pack()
    tile_size = SIZE / (DIMENSION + 1)
    for row in range(DIMENSION):
        for col in range(DIMENSION):
            x1 = col * tile_size + tile_size
            y1 = row * tile_size + tile_size
            x2 = x1 + tile_size
            y2 = y1 + tile_size

            canvas.create_rectangle(x1, y1, x2, y2, fill='white')

            canvas.create_line(x1, y1, x1, y2, fill="black")
            canvas.create_line(x1, y1, x2, y1, fill="black")

    for row in range(DIMENSION):
        x = tile_size * 0.5
        y = row * tile_size + tile_size * 1.5
        canvas.create_text(x, y, text=str(row + 1), anchor="center")

    for col in range(DIMENSION):
        x = col * tile_size + tile_size * 1.5
        y = tile_size * 0.5
        canvas.create_text(x, y, text=chr(col + 65), anchor="center")

    # langeliu zymejimas
    for row in range(DIMENSION):
        for col in range(DIMENSION):
            colors = ['firebrick1', 'Turquoise2', 'aquamarine4', 'OliveDrab2', 'purple1']
            value = matrix[row][col]
            if matrix[row][col] != 0:
                x1 = col * tile_size + tile_size
                y1 = row * tile_size + tile_size
                x2 = x1 + tile_size
                y2 = y1 + tile_size
                canvas.create_rectangle(x1, y1, x2, y2, fill=colors[value-1])
    window.mainloop()


main_board()
