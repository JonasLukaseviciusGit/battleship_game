import tkinter as tk
import numpy as np

SIZE = 700
DIMENSION = 20

TOTAL_SIZE = 1000


def create_matrix():
    matrix = np.zeros((DIMENSION, DIMENSION), dtype=int)
    return matrix


matrix = create_matrix()


def create_board():
    # Create the main window
    window = tk.Tk()
    window.title("Tiled Board")

    # Create the canvas
    global canvas
    canvas = tk.Canvas(window, width=TOTAL_SIZE, height=SIZE)
    canvas.pack()

    global tile_size
    tile_size = SIZE / (DIMENSION + 1)  # Size of each tile in pixels

    # Draw the tiles and lines
    for row in range(DIMENSION):
        for col in range(DIMENSION):
            x1 = col * tile_size + tile_size
            y1 = row * tile_size + tile_size
            x2 = x1 + tile_size
            y2 = y1 + tile_size

            canvas.create_rectangle(x1, y1, x2, y2, fill='white')

            # Draw the lines
            canvas.create_line(x1, y1, x1, y2, fill="black")  # Vertical line
            canvas.create_line(x1, y1, x2, y1, fill="black")  # Horizontal line

    # Numerate the y-axis with numbers
    for row in range(DIMENSION):
        x = tile_size * 0.5
        y = row * tile_size + tile_size * 1.5
        canvas.create_text(x, y, text=str(row + 1), anchor="center")

    # Numerate the x-axis with letters
    for col in range(DIMENSION):
        x = col * tile_size + tile_size * 1.5
        y = tile_size * 0.5
        canvas.create_text(x, y, text=chr(col + 65), anchor="center")

    canvas.create_line(SIZE, 0, SIZE, SIZE, fill="black", width=2)  # Vertical line 1
    canvas.create_line(TOTAL_SIZE, 0, TOTAL_SIZE, SIZE, fill="black", width=2)  # Vertical line 2
    canvas.create_line(SIZE, tile_size/10, TOTAL_SIZE, tile_size/10, fill="black", width=2)  # Horizontal line 1
    canvas.create_line(SIZE, SIZE, TOTAL_SIZE, SIZE, fill="black", width=2)  # Horizontal line 2

    # Create the centered text
    canvas.create_text(((SIZE + TOTAL_SIZE) / 2), (tile_size / 2), text="YOUR SHIPS", font=("Arial", 12), justify="center")

    def laivu_lentele():
        laivai = ['penkiamotoriai', 'keturmotoriai', 'trimotoriai', 'dvimotoriai', 'vienmotoriai']
        vieta_tekstui = 125
        button_coords = []


        x1 = SIZE + tile_size/5
        x2 = SIZE + tile_size/5 + vieta_tekstui
        y1 = tile_size/10 + tile_size
        y2 = tile_size/10 + tile_size * 2
        for laivas in laivai:
            a, b, c, d = x1+tile_size/5, y1+tile_size/5, x2-tile_size/10, y2-tile_size/10
            canvas.create_rectangle(a, b, c, d, fill='azure', outline='azure')
            canvas.create_text((x1 + x2)/2, (y1 + y2)/2, text=laivas, font=("Arial", 12), justify="center")
            button_coords.append([a, b, c, d, laivas])
            y1 += tile_size
            y2 += tile_size
        canvas.create_line(SIZE + tile_size/5 + vieta_tekstui, tile_size*1.2, SIZE + tile_size/5 + vieta_tekstui,
                           tile_size/10 + tile_size * 6, fill="black", width=1)  # Vertical line 1

        class Laivu_lenta:
            def __init__(self):
                self.square_size = 20       # kvadratelio dydis
                self.dist = 10              # tarpelio tarp kvadratelio dydis
                self.coordinates = []       # laivus reprezentuojanciu kvadrateliu koordinates

            def create_empty_board(self):
                y1 = tile_size + tile_size/2.25
                y2 = tile_size + tile_size/2.25 + self.square_size
                j = 1
                for _ in range(5):
                    x1 = SIZE + vieta_tekstui + tile_size / 2
                    x2 = SIZE + vieta_tekstui + tile_size / 2 + self.square_size
                    tipas = []      # sarasas tam tikro tipo laivus reprezentuojanciu kvadrateliu koordinatems
                    for i in range(j):
                        tipas.append([x1, y1, x2, y2])
                        canvas.create_rectangle(x1, y1, x2, y2, fill='white', outline='black')
                        x1 += self.square_size + self.dist
                        x2 += self.square_size + self.dist
                    self.coordinates.append(tipas)
                    j += 1
                    y1 += tile_size
                    y2 += tile_size

            def get_coordinates(self):
                return self.coordinates

        laivu_info = Laivu_lenta()
        laivu_info.create_empty_board()

        def on_button_hover(event):
            x = event.x
            y = event.y

            canvas.delete('pazymeta')

            for button in button_coords:
                if x > button[0] and x < button[2]:
                    if y > button[1] and y < button[3]:
                        x1 = button[0]
                        y1 = button[1]
                        x2 = button[2]
                        y2 = button[3]
                        tekstas = button[4]
                        canvas.create_rectangle(x1, y1, x2, y2, fill='ivory1', outline='ivory1', tags='pazymeta')
                        canvas.create_text((x1+x2)/2, (y1+y2)/2, text=tekstas, font=("Arial", 12), justify="center", tags='pazymeta')

        def on_tile_hover(event):
            # Calculate the tile indices based on cursor position
            row = int(event.y / tile_size) - 1
            col = int(event.x / tile_size) - 1

            # Clear previous green tiles
            canvas.delete("green_tile")

            # Check if the indices are within the valid range
            if row >= 0 and row < DIMENSION and col >= 0 and col < DIMENSION:
                x1 = col * tile_size + tile_size
                y1 = row * tile_size + tile_size
                x2 = x1 + tile_size
                y2 = y1 + tile_size
                canvas.create_rectangle(x1, y1, x2, y2, fill='pale goldenrod', tags="green_tile")

        def on_hover(event):
            on_tile_hover(event)
            on_button_hover(event)

        canvas.bind("<Motion>", on_hover)

        def on_button_click(event):
            x = event.x
            y = event.y

            canvas.delete('paspaustas')

            for button in button_coords:
                if x > button[0] and x < button[2]:
                    if y > button[1] and y < button[3]:
                        x1 = button[0]
                        y1 = button[1]
                        x2 = button[2]
                        y2 = button[3]
                        tekstas = button[4]
                        canvas.create_rectangle(x1, y1, x2, y2, fill='pale goldenrod', outline='pale goldenrod', tags='paspaustas')
                        canvas.create_text((x1+x2)/2, (y1+y2)/2, text=tekstas, font=("Arial", 12), justify="center", tags='paspaustas')

        def on_tile_click(event):
            # Calculate the tile indices based on cursor position
            row = int(event.y / tile_size) - 1
            col = int(event.x / tile_size) - 1

            # Check if the indices are within the valid range
            if row >= 0 and row < DIMENSION and col >= 0 and col < DIMENSION:
                x1 = col * tile_size + tile_size
                y1 = row * tile_size + tile_size
                x2 = x1 + tile_size
                y2 = y1 + tile_size
                canvas.create_rectangle(x1, y1, x2, y2, fill='dark khaki', tags="engine")
                matrix[row][col] = 1  # Set the value in the matrix to 1 for the clicked tile

        def on_click(event):
            on_tile_click(event)
            on_button_click(event)

        # Bind the motion event to change tile color
        canvas.bind("<Button-1>", on_click)  # Bind the click event

    laivu_lentele()



        # Start the tkinter event loop
    window.mainloop()


# Create the board
create_board()
